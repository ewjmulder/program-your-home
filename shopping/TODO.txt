C:\Program Files\EventStore-3.3.0>
EventStore.ClusterNode.exe --db "D:\Prive\Program Your Home\EventStoreData\DB" --log "D:\Prive\Program Your Home\EventStoreData\Logs"

- All owned collections as maps with key id (but how to add new?)
- Convenience method(s) on own repo interface, eg findAll returns Collection/Set instead of Iterable
X @Transactional now only works at the class level, why not on on method level?
  X Plus: when to use javax and spring one's?
  --> Java ones are fine and a full replacement. Problem arose due to self-invocation in the class, so proxy could not pick up on the method call
- Add tostring builder for entity objects - only display non-lazy fields!!
- When using @Transactional (or probably even not then) save repo calls on existing entities aren't needed, since they will be saved on session close automatically
  - So remove save's evrywhere where not needed.
- Split product and image into sep entities and sep CRUD calls for performance and size of JSON responses
- Move common stuff to commons-pyh-jpa
- Make department dependent on company? pro: easier linking & thinking, con: departments in same branch overlap a lot
- Sequence per entity instead of overall?
- Use extra interface identifyable (and maybe nameable) to reduce duplication in API interfaces?
- Use this: https://geteventstore.com/blog/20140904/event-store-3.0.0-client-api-for-jvm-clients/index.html?
  - https://github.com/valdasraps/esj
- Technical TODO after first 'poc' working:
  - Get @Converter(autoApply = true) to work instead of @Convert 'manual' annotation on each field
  - Use schema 'shopping' instead of 'public'
  - Don't use auto-create (at least not by default (validate)), see how to do this dynamically
  X Get datasource definition from properties instead of tempfix bean (and where to place - currently sep application.properties file)
  - Read more about possible config of DB for spring boot / data jpa and finetune (eg pooling / entity manager (factory) config details)
  X Do/don't include driver class in config?
  X What hibernate maven includes are needed?
  - Check all columns on nullable definition
  X DB constraints with JPA annotations
    X Unique constraint on barcode
  - Fully model out JPA entities
  - Reseach on JPA (2.1) and which features we'd like
  - Use any of the more sophisticated Repository interfaces or classes 'between' CrudRepository and QueryDslJpaRepository?
  - Annotation @GeneratedValue(strategy = GenerationType.AUTO) seems to trigger the creation of 1 sequence that serves all id columns.
    - This works fine, unless we have 1 very big table (with an id of type long) that 'uses up' the numbers until Integer.MAX_VALUE
      and a small table (with an id of type int) that needs another value but now goes out of range.
    - Solution / workaround: use long's everywhere, just to be safe or dig deeper into this and find an annotational way that does not
      result in this problem. Such as: more explicit use of sequences in annotations and let them differ between tables.
  - Document somewhere internal trickery of so much auto-config:
    - Just an interface definition of the Spring Data JPA for the entity to be used.
    - @SpringBootApplication annotation should be used to enable auto JPA configuration
    - Hibernate / JPA persistence provider must be on classpath
    - spring-boot-starter-jdbc or -data-jpa must be on classpath for auto datasource etc to work
    - Driver of specific DB must be on classpath
    - Anything else?
    
- Add some extra 'real life use' flexibility, like:
  - Several different products (different bar code) can be 1 pyh product, like oude/extra belegen kaas or pindakaas with(out) nuts
  - amount of 2 products can be 1 other product, like 2 small smeerkaasjes can be 1 large


- For now: barcode is assumed to be overall unique. Which is the case if one system is used
  (like EAN in most of Europe). In theory this can be broken by having products in the system
  that use different barcode systems with the same length and have a number clash.
  An idea is to extend the modeling to incorporate the barcode system into the products.
  This makes adding products more difficult, since a barcode scanner cannot easily 'see' the
  system used, other than the length. Or can it? Either way, for now 1 code is both easy and sufficient.
