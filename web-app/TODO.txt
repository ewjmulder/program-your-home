- Add nice favicon.ico file for PYH webapp
X move to jquery rest prod (min) version
X move to handlebars prod (runtime) version
- find out if we need all mmenu css and js stuff
X Figure out a nicer way to connect the click logic to the activities/lights/etc pages
- Refactor out local images (refreshable ones at least) and use all images from server
  - Serve module dependent images from the main server -> individual modules should not be required to provide context images for their functionality!
- Document specifics of used JS stuff on menu / pages / rest / etc
  - mmenu: href='#' will have default behavior blocked!
  - mmenu: explicitely setting offCanvas: true will trigger a menu sliding bug!
  - mmenu: Custom change in the colors of the dark theme
  - rest: double nested resources requires ID for the first!
    So my REST service starts at /main /hue etc, which makes sense indeed, sep rest services for these URL's
    furthermore, the rest plugin really forces using the REST api, so get ready to reastify :)
	(probably fine to support both full rest and getters along the way. (or just use rest where I can use it and
	use simple wget style stuff to activate activities / press buttons etc)
  - Design choices: changes in the list of lights, devices, activities etc are NOT auto-refreshable! You need to reboot the app to load those changes.
    Nice add-on: detect the changes and provide message with button to reboot.
- Unit test your javascript code!  
X Bug fix: after menu open-close, you can slide the page over the icon bar (somehow magically fixed by hammer) --> well, not really, so more deep diving was needed
- Inform mmenu author about hammer improvement
- Now that we have so many modules, we should have some way of merge+minify -> brunch!
X Use Deferred.promise() as return value everywhere where Deferred is used
X Find a (proper) solution for possible race condition when activating an activity and then switching to the child page
  - Details: toggle in progress, child page gets inactive current state, toggle finishes, update event broadcasted, child subscribes for updates
  - Possible solution: at least the subscribe must be done before the get current status. Then when current status returns it should check if no changed event has
    been processed meanwhile. Furthermore: state change event handlers should be able to handle the case where the cache is still empty, but a change comes in anyway.
    - Possible sub-solution for last problem: keep track of initial current status loading done.
      Then, if not but change comes in, save the new state in temp var, when the current status does come in, use latest from state change (if available) instead of state request result.

Problem described above is probably successfully eliminated by the 'global' resource cache over all pages. Untick when it might reappear.

- Only use enums in api module (or is it really needed in main or somewhere else as well?) -> idea: api contains all fine grained api stuff, no need to use enums 'yourself'.
- Home page is sub menu item -> auto-slideout the menu to that submenu (setting selected actually works)
- Keep selected page in menu in sync with auto-parent-child forwarding (eg activities)
