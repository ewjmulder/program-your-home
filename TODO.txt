Technical / architecture TODO:
- Add checkstyle plugin / eclipse settings for lots of stuff including javadoc
X Set JAVA_HOME back to Java 8 after Scala Coursera is done
- Property files only need to be imported once, and it can be any (Spring) class. Plus Spring boot config can be in there as well!
- Check usage of synchronized, same thread can (of course) still enter synchronized methods of the same class! (particularly with looping and adding/removing)
- Naming convention for PYH domain classes: PyhSomething, to avoid conflicts with other API's like Philips and own config JAXB classes
- Document all various comments in some kind of format (Github Flavored MD?)
- Document configuration decisions: properties file for technical stuff (connection info, account info, datasources, etc.)
- PYH Utils: extract the common module functionality
- Persistence (sensor data in DB), current config as memory dump or so, should be restorable after midnight reboot.
- Add geografical data to items (floor, room, location in room, size)
- Introduce Maven plugin that will fail the build if there are multiple versions on the classpath of the same dependency - to try to avoid classpath conflict issues
- Property keys as static final String declarations instead of hardcoded inline
- UTF-8 property is inherited from parent right? So no need to repeat it in all child projects everywhere.
- Put git ignore of common stuff (.project, .classpath, .settings, target) at a higher level, so they are not needed per project
- Config XSD/XML files: why in separate module for server, but not for modules themselves? -> accept or move server config inside server module
- XSD/XML at server level for 'filling' the server with content en behaviour (activities, rules, etc)
- XSD/XML per module with non-technical, or at least more subject related stuff, like devices for IR, etc.
- Only allow same server deployment of backend and frontend for security reasons? Or proper config for CORS in xml/props
- Internally in modules: use mapping from id to model impl value object to easily do existence checks and retrieve data
- Workaround for using qualifier on injected beans of type Executor? (result of using Spring Boot websockets with SockJS)
- Consider moving to a relational database for storing the static data, instead of XML. (dynamic data should be put into a database anyway)
- Move to a more standard form of authentication, like OAuth2 Resource Owner Password Flow. Compatible with Spring Security: http://projects.spring.io/spring-security-oauth/docs/oauth2.html
- POM file management
  - right scopes for obvious dependencies in parent pom: e.g. test for junit (hmm, or not, not really clear on child project what the scope is)
  - bom dependencies in parent, e.g. Spring
- Naming scheme:

- Think about and make consistent: the xsd namespaces for main config and module configs
  -> name 'clash' for tags infraRed / infraRedConfig in main/server and infrared spcific config files
- When to use camel case, when dashes '-'?

- Default lightning conditions - schedule (different from normal scheduling mechanism)
            // Is setting a certain lighting condition considered an activity? Or maybe there should be some sort of default behavior
            // with some options, that is considered the default for that day for instance. Just like a thermostate actually.
            //EG: when at home: do this, when not:do this
            // and do this could be either time based or 'darkness based' or combo setting scenes
            // you could even expand that to e.g. auto-starting the news every (work)day at 8 :) -> scheduled activity activation
            // Hmm, more generically this sounds like a scheduling feature, which is of course something that should be added.
            // But maybe specifically for the lighting it makes sense to have a default. e.g.:
            // - when dark -> turn light on at mood level depending on the current time, between energy (16:00) and relax (20:00)
            // From 20:00 onward (max), stay at relax, but slowly decrease brightness till 24:00 (lowest brightness)
            // Turning off completely still will be a manual action.


Module names and abbreviations:
Sync usage of these over the whole of PYH:
Full name in documentation (Javadoc etc), ...
Module id in maven module names, XML config tags, properties files, ...
Abbreviation in package names, ...


Full name         - module id         - abbreviation

Server            - server            - server
Philips Hue       - philips-hue       - hue
Infrared          - infra-red         - ir
Eneco Toon        - eneco-toon        - toon
Spotify Music     - spotify-music     - spotify
Sound Interaction - sound-interaction - sound

Possible future modules: Netflix, Uitzending Gemist, Shopping list / 'voorraadbeheer' / ...
